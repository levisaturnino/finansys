{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { Entry } from \"../shared/entry.model\";\nimport { switchMap } from 'rxjs/operators';\nlet EntryFormComponent = class EntryFormComponent {\n  /*get typeOptions(): Array<any>{\n    return Object.entries(Entry.types).map(\n      ([value, text]) => {\n        return {\n          text: text,\n          value: value\n        }\n      }\n    )\n  }*/\n  constructor(toastr, typeService, entryService, route, router, categoryService, formBuilder) {\n    this.toastr = toastr;\n    this.typeService = typeService;\n    this.entryService = entryService;\n    this.route = route;\n    this.router = router;\n    this.categoryService = categoryService;\n    this.formBuilder = formBuilder;\n    this.currentAction = \"\";\n    this.pageTitle = \"\";\n    this.submittingForm = false;\n    this.entry = new Entry();\n    this.imaskConfig = {\n      mask: Number,\n      scale: 2,\n      thousandsSeparator: \"\",\n      padFractionalZeros: true,\n      normalizeZeros: true,\n      radix: \",\"\n    };\n    this.ptBR = {\n      firstDayOfWeek: 0,\n      dayNames: ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'],\n      dayNamesShort: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab'],\n      dayNamesMin: ['Do', 'Se', 'Te', 'Qu', 'Qu', 'Se', 'Sa'],\n      monthNames: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],\n      monthNamesShort: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],\n      today: 'Hoje',\n      clear: 'Limpar'\n    };\n  }\n\n  ngAfterContentChecked() {\n    this.setPageTitle();\n  }\n\n  setPageTitle() {\n    if (this.currentAction == \"new\") {\n      this.pageTitle = \"Cadastro de Nova Lançamento\";\n    } else {\n      const entryName = this.entry.name || \"\";\n      this.pageTitle = \"Editando Lançamento: \" + this.entry.name;\n    }\n  }\n\n  ngOnInit() {\n    this.setCurrentAction();\n    this.setBuildEntryForm();\n    this.loadEntry();\n    this.loadCategories();\n  }\n\n  setBuildEntryForm() {\n    this.entryForm = this.formBuilder.group({\n      id: [null],\n      name: [null, [Validators.required, Validators.minLength(2)]],\n      description: [null],\n      type: [null, [Validators.required]],\n      amount: [null, [Validators.required]],\n      date: [null, [Validators.required]],\n      paid: [true, [Validators.required]],\n      categoryId: [null, [Validators.required]]\n    });\n  }\n\n  setCurrentAction() {\n    if (this.route.snapshot.url[0].path == \"new\") {\n      this.currentAction = \"new\";\n    } else {\n      this.currentAction = \"edit\";\n    }\n  }\n\n  loadEntry() {\n    if (this.currentAction == \"edit\") {\n      this.route.paramMap.pipe(switchMap(parameter => this.entryService.getById(+parameter.get(\"id\")))).subscribe(entry => {\n        var _a;\n\n        this.entry = entry;\n        (_a = this.entryForm) === null || _a === void 0 ? void 0 : _a.patchValue(entry);\n      }, error => alert(\"Ocorreu um erro no servidor, tente mais tarde\"));\n    }\n  }\n\n  createEntry() {\n    const entry = Object.assign(new Entry(), this.entryForm.value);\n    this.entryService.created(entry).subscribe(entry => this.actionsForSuccess(entry), error => this.actionsForError(error));\n  }\n\n  updateEntry() {\n    const entry = Object.assign(new Entry(), this.entryForm.value);\n    this.entryService.update(entry).subscribe(entry => this.actionsForSuccess(entry), error => this.actionsForError(error));\n  }\n\n  actionsForSuccess(entry) {\n    this.toastr.success(\"Solicitação processada com sucesso!\"); // redirect/reload component page\n\n    this.router.navigateByUrl(\"entries\", {\n      skipLocationChange: true\n    }).then(() => this.router.navigate(['entries', entry.id, \"edit\"]));\n  }\n\n  actionsForError(error) {\n    this.toastr.error(\"Ocorreu um erro ao processar a sua solicitação!\");\n    this.submittingForm = false;\n\n    if (error.status === 422) {\n      this.serverErrorMessages = JSON.parse(error._body).errord;\n    } else {\n      this.serverErrorMessages = [\"Falha na comunicação com o servidor. Por Favor, teste mais tarde.\"];\n    }\n  }\n\n  submitForm() {\n    this.submittingForm = true;\n\n    if (this.currentAction == \"new\") {\n      this.createEntry();\n    } else {\n      this.updateEntry();\n    }\n  }\n\n  loadCategories() {\n    this.categoryService.getAll().subscribe(categories => this.categories = categories);\n  }\n\n};\nEntryFormComponent = __decorate([Component({\n  selector: 'app-entry-form',\n  templateUrl: './entry-form.component.html',\n  styleUrls: ['./entry-form.component.css']\n})], EntryFormComponent);\nexport { EntryFormComponent };","map":null,"metadata":{},"sourceType":"module"}